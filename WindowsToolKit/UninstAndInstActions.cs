using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;

namespace WindowsToolKit
{
    internal enum UninstallerModes
    {
        WinDefend
    }
    public class UninstAndInstActions
    {
        internal static List<Action> GetActionsList(UninstallerModes mode)
        {
            List<Action> actions = new List<Action>();
            switch (mode)
            {
                case UninstallerModes.WinDefend:
                    var mach = Registry.LocalMachine;
                    var devGuard = mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard");
                    var fve = mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\FVE");
                    actions.Add(() =>
                    {
                        Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\FVEMsSecCore", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\wscsvc", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\WdNisDrv", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\WdNisSvc", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\WdFiltrer", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\WdBoot", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SecurityHealthService", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SrgmAgent", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SgrmBroker", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() =>
                    {
                        mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\WinDefend", true).SetValue("Start", 4, RegistryValueKind.DWord);
                    });
                    actions.Add(() => Log.Warning("Disabling WinDefender WMI Logger..."));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger", true).SetValue("Start", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger", true).SetValue("Status", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger", true).SetValue("Start", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger", true).SetValue("Status", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger", true).SetValue("EnableSecurityProvider", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue("SecurityHealth"));
                    actions.Add(() => Log.Warning("Disabling Tamper Protection..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features", true).SetValue("MbPlatformKillbitsFromEngine", new byte[8] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features", true).SetValue("TamperProtectionSource", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features", true).SetValue("MpCapability", new byte[8] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features", true).SetValue("TamperProtection", 0, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Disabling Anti-Phishing system..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreadDefense\\AuditMode", true).SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\NotifyUnsafeOrReusedPassword", true).SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\ServiceEnabled", true).SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\webthreatdefsvc", true).SetValue("Start", 4, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\webthreatdefusersvc", true).SetValue("Start", 4, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVertion\\Svchost\\WebThreadDefense", true).SetValue("Start", 4, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Disabling Security Health..."));
                    actions.Add(() => { try { mach.OpenSubKey("SOFTWARE\\Microsoft").DeleteSubKeyTree("Windows Security Health"); } catch { } });
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft").CreateSubKey("Windows Security Health"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\State", true).SetValue("Disabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Platform", true).SetValue("Registered", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Battery", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Battery", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Device Driver", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Device Driver", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Reliability", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Reliability", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Status Codes", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Status Codes", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Storage Health", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Storage Health", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Storage Health Metrics", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Storage Health Metrics", true).DeleteValue("WarningThreshold"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Time Service", true).SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Health Advisor\\Time Service", true).SetValue("WarningThreshold", null));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Update Monitor").DeleteValue("DiagnosticInterval"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Update Monitor").DeleteValue("MaxDaysOnOSVersion"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\Update Monitor").SetValue("UIReportingDisabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer").SetValue("TurnOffSPIAnimations", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer").SetValue("NoWelcomeScreen", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer").SetValue("EnforceShellExtensionSecurity", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\AntiTheftMode").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\ClearTPMIfNotReady").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\PreventAutomaticDeviceEncryptionForAzureADJoinedDevices").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\RecoveryEnvironmentAuthentification").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\RequireDeviceEncryption").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\RequireProvisioningPackageSignature").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Security\\RequireRetrieveHealthCertificateOnBoot").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Security Health\\State").SetValue("Disabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Disabling SmartScreen..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppHost").SetValue("EnableWebContentEvaluation", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppHost").SetValue("PreventOverride", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Browser\\AllowSmartScreen").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\SmartScreen\\EnableSmartScreenInShell").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\SmartScreen\\EnableAppInstallControl").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppContainer\\Storage\\microsoft.microsoftedge_8wekyb3d8bbwe\\MicrosoftEdge\\PhishingFilter").SetValue("EnabledV9", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppContainer\\Storage\\microsoft.microsoftedge_8wekyb3d8bbwe\\MicrosoftEdge\\PhishingFilter").SetValue("PreventOverride", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\SmartScreen\\PreventOverrideForFilesInShell").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Edge\\SmartScreenEnabled").SetValue("(Default)", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SmartScreen").SetValue("ConfigureAppInstallControl", "Anywhere"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SmartScreen").SetValue("ConfigureAppInstallControlEnabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer").SetValue("SmartScreenEnabled", "off"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows\\System").SetValue("EnableSmartScreen", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("Software\\Microsoft\\Edge\\SmartScreenEnabled").SetValue("@", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SmartScreen").SetValue("ConfigureAppInstallControlEnabled", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SmartScreen").SetValue("ConfigureAppInstallControl", "Anywhere"));
                    actions.Add(() => Log.Warning("Disabling virtualization..."));
                    actions.Add(() => fve.SetValue("DisableExternalDMAUnderLock", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSRecovery", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSManageDRA", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSRecoveryPassword", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSRecoveryKey", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSHideRecoveryPage", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSActiveDirectoryBackup", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSActiveDirectoryInfoToStore", 2, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSRequireActiveDirectoryBackup", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("ActiveDirectoryInfoToStore", 2, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("MorBehavior", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("RDVConfigureBDE", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("RDVAllowBDE", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("RDVDisableBDE", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("RDVAllowUserCert", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("RDVEnforceUserCert", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("RDVDenyCrossOrg", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSAllowSecureBootForIntegrity", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSManageNKP", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSHardwareEncryption", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSAllowSoftwareEncryptionFailover", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSRestrictHardwareEncryptionAlgorithms", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("OSAllowedHardwareEncryptionAlgorithms", new byte[94] { 0x32, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x36, 0x00, 0x2E, 0x00, 0x38, 0x00, 0x34, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x34, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x32, 0x00, 0x3B, 0x00, 0x32, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x36, 0x00, 0x2E, 0x00, 0x38, 0x00, 0x34, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x34, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x34, 0x00, 0x32, 0x00, 0x00, 0x00 }));
                    actions.Add(() => fve.SetValue("OSEnablePrebootInputProtectorsOnSlates", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UseAdvancedStartup", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("EnableBDEWithNoTPM", 1, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UseTPM", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UseTPMPIN", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UseTPMKey", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UseTPMKeyPIN", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("EnableNonTPM", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UsePartialEncryptionKey", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("UsePIN", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("TPMAutoReseal", 0, RegistryValueKind.DWord));
                    actions.Add(() => fve.SetValue("FDVDiscoveryVolumeType", "<none>"));
                    actions.Add(() => fve.SetValue("FDVNoBitLockerToGoReader", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\FVE\\OSPlatformValidation_BIOS").SetValue("Enabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\FVE\\OSPlatformValidation_UEFI").SetValue("Enabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\FVE\\PlatformValidation").SetValue("Enabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("DeployConfigCIPolicy", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("EnableVirtualizationBasedSecurity", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("HVCIMATRequired", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("RequirePlatformSecurityFeature", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("CachedDrtmAuthIndex", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("RequireMicrosoftSignedBootChain", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("RequiredPlatformSecurityChanges", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("Locked", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("ConfigCIPolicyFilePath", "C:\\Windows\\schemas\\CodeIntegrity\\ExamplePolicies\\AllowAll.xml"));
                    actions.Add(() => devGuard.SetValue("HypervisorEnforcedCodeIntegrity", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("LsaCfgFlags", 0, RegistryValueKind.DWord));
                    actions.Add(() => devGuard.SetValue("ConfigureSystemGuardLaunch", 2, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\CredentialGuard").SetValue("Enabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity").SetValue("Enabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\AppV\\Cllient\\Virtualization").SetValue("EnableDynamicVirtualization", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\AppV\\Cllient\\Virtualization").SetValue("ProcessesUsingVirtualComponents", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\DeviceGuard\\EnableVirtualizationBasedSecurity").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\VirtualizationBasedTechnology\\HypervisorEnforcedCodeIntegrity").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\VirtualizationBasedTechnology\\RequireUEFIMemoryAttributesTable").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("EnableLUA", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("ConsentPromptBehaviorAdmin", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("ConsentPromptBehaviorUser", 3, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("EnableVirtualization", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("FilterAdministrationToken", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("EnableUIADesktopToggle", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("EnableInstallerDetection", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("ValidateAdminCodeSignatures", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\DeviceGuard\\ConfigureSystemGuardLaunch").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\DeviceGuard\\LsaCfgFlags").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\DeviceGuard\\RequirePlatformSecurityFeatures").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity").SetValue("Enabled", 0, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Disabling Windows Security Center..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Device performance and health").SetValue("UILockdown", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Device security").SetValue("UILockdown", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Firewall and network protection").SetValue("UILockdown", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableAccountProtectionUI").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableAppBrowserUI").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableClearTpmButton").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableDeviceSecurityUI").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableEnhancedNotifications").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableFamilyUI").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableHealthUI").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableNetworkUI").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableNotifications").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableTpmFirmwareUpdateWarning").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableVirusUI").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisallowExploitProtectionOverride").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\EnableCustomizedToasts").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\EnableInAppCustomization").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\HideRansomwareDataRecovery").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\HideSecureBoot").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\HideTPMTroubleshooting").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\HideWindowsSecurityNotificationAreaControl").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\wscsvc").SetValue("Start", 4, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SecurityHealthService").SetValue("Start", 4, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Security Center").SetValue("FirewallDisableNotify", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Security Center").SetValue("UpdatesDisableNotify", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications").SetValue("DisableEnhancedNotifications", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications").SetValue("DisableNotifications", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender Security Center\\Account protection").SetValue("DisableNotifications", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection").SetValue("DisallowExploitProtectionOverride", 1, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Disabling Windows Defender Security Center Notifications..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableEnhancedNotifications").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\DisableNotifications").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WindowsDefenderSecurityCenter\\HideWindowsSecurityNotificationAreaControl").SetValue("value", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft").DeleteSubKeyTree("Security Center"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft").CreateSubKey("Security Center"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Security Center").SetValue("FirewallDisableNotify", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Security Center").SetValue("UpdatesDisableNotify", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications").SetValue("DisableEnhancedNotifications", 1, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications").SetValue("DisableNotifications", 1, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Disabling Defender Policies..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowIOAVProtection").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("PUAProtection", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("DisableRoutinelyTakingAction", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("ServiceKeepAlive", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("AllowFastServiceStartup", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("DisableLocalAdminMerge", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("DisableAntiSpyware", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender").SetValue("RandomizeScheduleTaskTimes", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowArchiveScanning").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowBehaviorMonitoring").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowCloudProtection").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowEmailScanning").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowFullScanOnMappedNetworkDrives").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowFullScanRemovableDriveScanning").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowIntrusionPreventionSystem").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowOnAccessProtection").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowRealtimeMonitoring").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowScanningNetworkFiles").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowScriptScanning").SetValue("value", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowUserUIAccess").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AvgCPULoadFactor").SetValue("value", 32));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\CheckForSignaturesBeforeRunningScan").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\CloudBlockLevel").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\CloudExtendedTimeout").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\DaysToRetainCleanedMalware").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\DisableCatchupFullScan").SetValue("value", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\DisableCatchupQuickScan").SetValue("value", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\EnableControlledFolderAccess").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\EnableLowCPUPriority").SetValue("value", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\EnableNetworkProtection").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\PUAProtection").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\RealTimeScanDirection").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\ScanParameter").SetValue("value", 2));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\ScheduleScanDay").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\ScheduleScanTime").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\SignatureUpdateInterval").SetValue("value", 18));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\SubmitSamplesConsent").SetValue("value", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Exclusions").SetValue("DisableAutoExclusions", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\MpEngine").SetValue("MpEnablePus", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\MpEngine").SetValue("MpCloudBlockLevel", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\MpEngine").SetValue("MpBafsExtendedTimeout", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\MpEngine").SetValue("EnableFileHashComputation", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\NIS\\Consumers\\IPS").SetValue("ThrottleDetectionEventsRate", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\NIS\\Consumers\\IPS").SetValue("DisableSignatureRetirement", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\NIS\\Consumers\\IPS").SetValue("DisableProtocolRecognition", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Policy Manager").SetValue("DisableScanningNetworkFiles", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableRealtimeMonitoring", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableBehaviorMonitoring", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableOnAccessProtection", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableScanOnRealtimeEnable", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableIOAVProtection", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("LocalSettingOverrideDisableOnAccessProtection", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("LocalSettingOverrideRealtimeScanDirection", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("LocalSettingOverrideDisableIOAVProtection", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("LocalSettingOverrideDisableBehaviorMonitoring", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("LocalSettingOverrideDisableIntrusionPreventionSystem", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("LocalSettingOverrideDisableRealtimeMonitoring", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("RealtimeScanDirection", 2));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("IOAVMaxSize", 512));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableInformationProtectionControl", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableIntrusionPreventionSystem", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection").SetValue("DisableRawWriteNotification", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("LowCpuPriority", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableRestorePoint", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableArchiveScanning", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableScanningNetworkFiles", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableCatchupFullScan", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableCatchupQuickScan", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableEmailScanning", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableHeuristics", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").SetValue("DisableReparsePointScanning", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("SignatureDisableNotification", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("RealtimeSignatureDelivery", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("ForceUpdateFromMU", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("DisableScheduledSignatureUpdateOnBattery", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("UpdateOnStartUp", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("SignatureUpdateCatchupInterval", 2));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("DisableUpdateOnStartupWithoutEngine", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("ScheduleTime", 1440));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Signature Updates").SetValue("DisableScanOnUpdate", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet").SetValue("DisableBlockAtFirstSeen", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet").SetValue("LocalSettingOverrideSpynetReporting", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet").SetValue("SpynetReporting", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet").SetValue("SubmitSamplesConsent", 2));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration").SetValue("SuppressRebootNotification", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access").SetValue("EnableControlledFolderAccess", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Network Protection").SetValue("EnableNetworkProtection", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\WOW6432Node\\Policies\\Microsoft\\Windows Defender").SetValue("DisableRoutinelyTakingAction", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware").SetValue("ServiceKeepAlive", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware").SetValue("AllowFastServiceStartup", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware").SetValue("DisableRoutinelyTakingAction", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware").SetValue("DisableAntiSpyware", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware").SetValue("DisableAntiVirus", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware\\SpyNet").SetValue("SpyNetReporting", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Microsoft Antimalware\\SpyNet").SetValue("LocalSettingOverrideSpyNetReporting", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting").SetValue("DisableEnhancedNotifications", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting").SetValue("DisableGenericRePorts", 1));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting").SetValue("WppTracingLevel", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting").SetValue("WppTracingComponents", 0));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\CI\\Policy").SetValue("VerifiedAndReputablePolicyState", 0));
                    actions.Add(() => Log.Warning("Disabling Tamper Protection..."));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features").SetValue("MpPlatformKillbitsFromEngine", new byte[8] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features").SetValue("TamperProtectionSource", 0));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features").SetValue("MpCapability", new byte[8] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows Defender\\Features").SetValue("TamperProtection", 0));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\Server\\WebThreahDefSvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("SYSTEM\\CurrentControlSet\\Services\\webthreatdefsvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("SYSTEM\\CurrentControlSet\\Services\\webthreatdefusersvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\\WebThreatDefense"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost").DeleteValue("WebThreatDefense"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\AuditMode").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\NotifyUnsafeOrReusedPassword").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\ServiceEnabled").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows").CreateSubKey("WTDS"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS").CreateSubKey("Components"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS\\Components").SetValue("NotifyPasswordReuse", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS\\Components").SetValue("NotifyMalicious", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\AuditMode").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\NotifyUnsafeOrReusedPassword").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\WebThreatDefense\\ServiceEnabled").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => mach.DeleteSubKeyTree("SYSTEM\\CurrentControlSet\\Services\\webthreatdefsvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("SYSTEM\\CurrentControlSet\\Services\\webthreatdefusersvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\\WebThreatDefense"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost").DeleteValue("WebThreatDefense"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppX1sy7rwrc20ggq97a6x1mgmjat0rthy51"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppXb5yxv86nkhp530y0y50yxe69c1qwad1x"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppContainer\\Storage\\microsoft.sechealthui_8wekyb3d8bbwe"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\ProgIDs\\AppX1sy7rwrc20ggq97a6x1mgmjat0rthy51"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\ProgIDs\\AppXb5yxv86nkhp530y0y50yxe69c1qwad1x"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\windows.fileTypeAssociation\\.all\\AppXb5yxv86nkhp530y0y50yxe69c1qwad1x"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\windows.protocol\\windowsdefender\\AppX1sy7rwrc20ggq97a6x1mgmjat0rthy51d"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PolicyCache\\Microsoft.SecHealthUI_8wekyb3d8bbwe"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\SystemAppData\\Microsoft.SecHealthUI_8wekyb3d8bbwe"));
                    actions.Add(() => Registry.CurrentUser.DeleteSubKeyTree("Software\\Classes\\Local Settings\\MrtCache\\C:%5CWindows%5CSystemApps%5CMicrosoft.Windows.AppRep.ChxApp_cw5n1h2txyewy%5Cresources.pri"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\windows.protocol\\windowsdefender"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\windows.protocol\\windowsdefender"));
                    actions.Add(() => Log.Warning("Removing Windows Defender..."));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{195B4D07-3DE2-4744-BBF2-D90121AE785B}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{361290c0-cb1b-49ae-9f3e-ba1cbe5dab35}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{45F2C32F-ED16-4C94-8493-D72EF93A051B}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{6CED0DAA-4CDE-49C9-BA3A-AE163DC3D7AF}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{8a696d12-576b-422e-9712-01b9dd84b446}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{8C9C0DB7-2CBA-40F1-AFE0-C55740DD91A0}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{A2D75874-6750-4931-94C1-C99D3BC9D0C7}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{DACA056E-216A-4FD1-84A6-C306A017ECEC}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{E3C9166D-1D39-4D4E-A45D-BC7BE9B00578}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\WOW6432Node\\CLSID\\{F6976CF5-68A8-436C-975A-40BE53616D59}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{2781761E-28E0-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{195B4D07-3DE2-4744-BBF2-D90121AE785B}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{361290c0-cb1b-49ae-9f3e-ba1cbe5dab35}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{45F2C32F-ED16-4C94-8493-D72EF93A051B}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{6CED0DAA-4CDE-49C9-BA3A-AE163DC3D7AF}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{8a696d12-576b-422e-9712-01b9dd84b446}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{8C9C0DB7-2CBA-40F1-AFE0-C55740DD91A0}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{A2D75874-6750-4931-94C1-C99D3BC9D0C7}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{DACA056E-216A-4FD1-84A6-C306A017ECEC}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{E3C9166D-1D39-4D4E-A45D-BC7BE9B00578}"));
                    actions.Add(() => mach.DeleteSubKeyTree("Software\\Classes\\CLSID\\{F6976CF5-68A8-436C-975A-40BE53616D59}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{2781761E-28E0-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{195B4D07-3DE2-4744-BBF2-D90121AE785B}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{361290c0-cb1b-49ae-9f3e-ba1cbe5dab35}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{45F2C32F-ED16-4C94-8493-D72EF93A051B}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{6CED0DAA-4CDE-49C9-BA3A-AE163DC3D7AF}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{8a696d12-576b-422e-9712-01b9dd84b446}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{8C9C0DB7-2CBA-40F1-AFE0-C55740DD91A0}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{A2D75874-6750-4931-94C1-C99D3BC9D0C7}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{DACA056E-216A-4FD1-84A6-C306A017ECEC}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{E3C9166D-1D39-4D4E-A45D-BC7BE9B00578}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{F6976CF5-68A8-436C-975A-40BE53616D59}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{2781761E-28E0-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{195B4D07-3DE2-4744-BBF2-D90121AE785B}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{361290c0-cb1b-49ae-9f3e-ba1cbe5dab35}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{45F2C32F-ED16-4C94-8493-D72EF93A051B}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{6CED0DAA-4CDE-49C9-BA3A-AE163DC3D7AF}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{8a696d12-576b-422e-9712-01b9dd84b446}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{8C9C0DB7-2CBA-40F1-AFE0-C55740DD91A0}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{A2D75874-6750-4931-94C1-C99D3BC9D0C7}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{DACA056E-216A-4FD1-84A6-C306A017ECEC}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{E3C9166D-1D39-4D4E-A45D-BC7BE9B00578}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{F6976CF5-68A8-436C-975A-40BE53616D59}"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\MitigationOptions").DeleteValue("MitigationOptions_FontBlocking"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan").DeleteValue("DisableScanningMappedNetworkDrivesForFullScan"));
                    actions.Add(() => mach.DeleteSubKeyTree("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger"));
                    actions.Add(() => mach.DeleteSubKeyTree("SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\PolicyManager\\default\\Defender\\AllowIOAVProtection").SetValue("value", 0, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Removing Windows Security Action Center..."));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{05F3561D-0358-4687-8ACD-A34D24C488DF}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{05F3561D-0358-4687-8ACD-A34D24C488DF}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{05F3561D-0358-4687-8ACD-A34D24C488DF}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{05F3561D-0358-4687-8ACD-A34D24C488DF}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\AppUserModelId\\Windows.Defender.SecurityCenter"));
                    actions.Add(() => Registry.CurrentUser.DeleteSubKeyTree("Software\\Microsoft\\Windows\\CurrentVersion\\PushNotifications\\Backup\\Windows.Defender.SecurityCenter"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppUserModelId\\Windows.SystemToast.SecurityAndMaintenance"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Windows.SecurityCenter.SecurityAppBroker"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Windows.SecurityCenter.WscBrokerManager"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Windows.SecurityCenter.WscCloudBackupProvider"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Windows.SecurityCenter.WscDataProtection"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Security Center\\Provider\\Av"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Security Center\\Provider\\SecurityApp"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Notifications\\QuietHours\\AlwaysAllowedApps").DeleteValue("WindowsSecurity"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Notifications\\QuietHours\\AlwaysAllowedApps").DeleteValue("WindowsSystemToastSecurity"));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("Software\\Classes\\Local Settings\\ImmutableMuiCache\\Strings\\52C64B7E").DeleteValue("@C:\\WINDOWS\\System32\\ActionCenterCPL.dll,-1#immutable1"));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("Software\\Classes\\Local Settings\\ImmutableMuiCache\\Strings\\52C64B7E").DeleteValue("@C:\\WINDOWS\\System32\\ActionCenterCPL.dll,-2#immutable1"));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("Software\\Classes\\Local Settings\\MuiCache\\6\\52C64B7E").DeleteValue("@ActionCenterCPL.dll, -1"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => Registry.ClassesRoot.OpenSubKey("Local Settings\\ImmutableMuiCache\\Strings\\52C64B7E").DeleteValue("@C:\\WINDOWS\\System32\\ActionCenterCPL.dll,-1#immutable1"));
                    actions.Add(() => Registry.ClassesRoot.OpenSubKey("Local Settings\\ImmutableMuiCache\\Strings\\52C64B7E").DeleteValue("@C:\\WINDOWS\\System32\\ActionCenterCPL.dll,-2#immutable1"));
                    actions.Add(() => Registry.ClassesRoot.OpenSubKey("Local Settings\\MuiCache\\6\\52C64B7E").DeleteValue("@ActionCenterCPL.dll,-1"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\AppID\\{7eaae8b9-e33f-4b4f-bb40-9ada6beec764}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\AppID\\{97a3a7e6-bb30-46b4-ae18-76729fa5ab56}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppID\\{7eaae8b9-e33f-4b4f-bb40-9ada6beec764}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppID\\{97a3a7e6-bb30-46b4-ae18-76729fa5ab56}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\AppID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{2781761E-28E2-4109-99FE-B9D127C57AFE}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\windows.fileTypeAssociation\\.all\\AppXb5yxv86nkhp530y0y50yxe69c1qwad1x"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\PackageRepository\\Extensions\\ProgIDs\\AppXb5yxv86nkhp530y0y50yxe69c1qwad1x"));
                    actions.Add(() => Log.Warning("Removing Defender Tasks..."));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{0ACC9108-2000-46C0-8407-5FD9F89521E8}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{1D77BCC8-1D07-42D0-8C89-3A98674DFB6F}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{4A9233DB-A7D3-45D6-B476-8C7D8DF73EB5}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{B05F34EE-83F2-413D-BC1D-7D5BD6E98300}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{01afc156-f2eb-4c1c-a722-8550417d396f}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{a3b3c46c-05d8-429b-bf66-87068b4ce563}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{BB64F8A7-BEE7-4E1A-AB8D-7D8273F7FDB6}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}"));
                    actions.Add(() => Log.Warning("Removing services..."));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\MsSecCore"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\wscsvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\WdNisDrv"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\WdNisSvc"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\WdFiltrer"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\WdBoot"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\SecurityHealthService"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\SgrmAgent"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\SgrmBroker"));
                    actions.Add(() => mach.DeleteSubKeyTree("System\\CurrentControlSet\\Services\\WinDefend"));
                    actions.Add(() => mach.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection").SetValue("DisallowExploitProtectionOverride", 1, RegistryValueKind.DWord));
                    actions.Add(() => Log.Warning("Removing shell associations..."));
                    actions.Add(() => Registry.CurrentUser.DeleteSubKeyTree("Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\windowsdefender"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\AppUserModelId\\Windows.Defender"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\AppUserModelId\\Microsoft.Windows.Defender"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("AppX9kvz3rdv8t7twanaezbwfcdgrbg3bck0"));
                    actions.Add(() => Registry.CurrentUser.DeleteSubKeyTree("Software\\Classes\\ms-cxh"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Local Settings\\MrtCache\\C:%5CWindows%5CSystemApps%5CMicrosoft.Windows.AppRep.ChxApp_cw5n1h2txyewy%5Cresources.pri"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WindowDefender"));
                    actions.Add(() => Registry.CurrentUser.DeleteSubKeyTree("Software\\Classes\\AppX9kvz3rdv8t7twanaezbwfcdgrbg3bck0"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WindowsDefender"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\ControlSet001\\Control\\Ubpm").DeleteValue("CriticalMaintenance_DefenderCleanup"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\ControlSet001\\Control\\Ubpm").DeleteValue("CriticalMaintenance_DefenderVerification"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Ubpm").DeleteValue("CriticalMaintenance_DefenderCleanup"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Ubpm").DeleteValue("CriticalMaintenance_DefenderVerification"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WindowsDefender-1"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WindowsDefender-2"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WindowsDefender-3"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WindowsDefender-1"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WindowsDefender-2"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WindowsDefender-3"));
                    actions.Add(() => Log.Warning("Removing startup entries..."));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run").DeleteValue("Windows Defender"));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run").DeleteValue("SecurityHealth"));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run").DeleteValue("Windows Defender"));
                    actions.Add(() => Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run").DeleteValue("Windows Defender"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WebThreatDefSvc_Allow_In"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WebThreatDefSvc_Allow_Out"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WebThreatDefSvc_Block_In"));
                    actions.Add(() => mach.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\RestrictedServices\\Static\\System").DeleteValue("WebThreatDefSvc_Block_Out"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("CLSID\\{E48B2549-D510-4A76-8A5F-FC126A6215F0}"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("WOW6432Node\\CLSID\\{E48B2549-D510-4A76-8A5F-FC126A6215F0}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\CLSID\\{E48B2549-D510-4A76-8A5F-FC126A6215F0}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Classes\\WOW6432Node\\CLSID\\{E48B2549-D510-4A76-8A5F-FC126A6215F0}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Microsoft.OneCore.WebThreatDefense.Service.UserSessionServiceManager"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Microsoft.OneCore.WebThreatDefense.ThreatExperienceManager.ThreatExperienceManager"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Microsoft.OneCore.WebThreatDefense.ThreatResponseEngine.ThreatDecisionEngine"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\WindowsRuntime\\ActivatableClassId\\Microsoft.OneCore.WebThreatDefense.Configuration.WTDUserSettings"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellServiceObjects\\{900c0763-5cad-4a34-bc1f-40cd513679d5}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellServiceObjects\\{900c0763-5cad-4a34-bc1f-40cd513679d5}"));
                    actions.Add(() => mach.DeleteSubKeyTree("SOFTWARE\\Microsoft\\Windows Defender"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Folder\\shell\\WindowsDefender"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("DesktopBackground\\Shell\\WindowsSecurity"));
                    actions.Add(() => Registry.ClassesRoot.DeleteSubKeyTree("Folder\\shell\\WindowsDefender\\Command"));
                    actions.Add(() => Directory.Delete("C:\\Windows\\SystemApps\\"));

                    break;
            }
            return actions;
        }
    }
}
